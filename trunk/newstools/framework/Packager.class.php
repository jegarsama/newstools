<?php#region License Statement	// Copyright (c) Sitemaps.co.kr All rights reserved.	//	// Filename	: Packager.class.php	// Path		: [framework]/	// Code		: UTF-8	// Desc		: Packager	// Author	: Sergei Kim (김성호, master@newstools.kr)	// Update	: 20091025#endregionif(!defined('__BASE_PATH__')){header("HTTP/1.1 404 Not Found");	header("Content-Type: text/html; charset=utf-8");	exit();}if(!defined('__FRAMEWORK_PATH__')){header("HTTP/1.1 404 Not Found");	header("Content-Type: text/html; charset=utf-8");	exit();}if(__FRAMEWORK_PATH__!=str_replace('Packager.class.php', '', str_replace('\\', '/', __FILE__))){header("HTTP/1.1 412 Precondition Failed");	header("Content-Type: text/html; charset=utf-8");	exit();}if( !class_exists("Packager") ){	require_once "System/package.php";	class Packager extends SystemClass	{		#region Fields Statement			public $classList = Array();	//클래스 목록		#endregion		#region Creator Statement			function __construct()			{			}			function __destruct()			{			}		#endregion		#region Base Statement			public static function GetFrameworkPath()			{				return __FRAMEWORK_PATH__;			}			public static function GetSystemPath()			{				return __FRAMEWORK_PATH__."System/";			}			public static function GetUnionClassPath()			{				return __FRAMEWORK_PATH__."Include/";			}			public static function GetSolutionClassPath()			{				return __BASE_PATH__."Include/";			}		#endregion		#region Load Statement			/**			* Namespace Package 로딩			*			* @param string		$as_ClassPath			:	클래스 파일경로			* @param string		$as_ClassRoot			:	클래스 저장소 기본루트			* @return boolean			*/			public static function LoadNamespace( $as_ClassPath, $as_ClassRoot=null )			{				if( !isset($as_ClassRoot) )	$as_ClassRoot = Packager::GetFrameworkPath();				$classPath = sprintf('%s%s/package.php', $as_ClassRoot, $as_ClassPath);				if( file_exists($classPath) )				{					require_once $classPath;					return true;				}				if( isset($this) )	$this->onError('fatal', "Cant't Find Package : " . $as_ClassName . " - " . $classPath);				return false;			}			/**			* 클래스 정의부 로딩			*			* @param string		$as_ClassPath			:	클래스 파일경로			* @param string		$as_ClassName			:	클래스명			* @param string		$as_ClassRoot			:	클래스 저장소 기본루트			* @return boolean			*/			public static function LoadClassDefine( $as_ClassPath, $as_ClassName, $as_ClassRoot=null )			{				if( !isset($as_ClassRoot) )	$as_ClassRoot = Packager::GetSolutionClassPath();				$classPath = sprintf('%s%s%s.class.php', $as_ClassRoot, $as_ClassPath, $as_ClassName);				if( file_exists($classPath) )				{					require_once $classPath;					return true;				}				if( isset($this) )	$this->onError('fatal', "Cant't Find Class : " . $as_ClassName . " - " . $classPath);				return false;			}			/**			* 클래스 반환 : 중앙관리를 필요로 하는 경우에만 활용함			*			* @param string		$as_ClassPath			:	클래스 파일경로			* @param string		$as_ClassName			:	클래스명			* @param string		$as_ClassRoot			:	클래스 저장소 기본루트			* @param boolean	$ab_NewInstance			:	새로운 인스턴스를 반환할 것인지 여부			* @return class			*/			public function &LoadClass( $as_ClassPath, $as_ClassName, $as_ClassRoot=null, $ab_NewInstance=false )			{				if( !isset($as_ClassRoot) )	$as_ClassRoot = Packager::GetSolutionClassPath();				//이미 로딩된 클래스 이면 다시 반환				if( isset( $this->classList[$as_ClassName] ) )				{					if( $ab_NewInstance )					{						$ii_AddIdx = count( $this->classList[$as_ClassName] );						$this->classList[$as_ClassName][$ii_AddIdx] =& new $as_ClassName();						return $this->classList[$as_ClassName][$ii_AddIdx];					}					else					{						return $this->classList[$as_ClassName][0];					}				}				else				{					if( $this->LoadClassDefine( $as_ClassPath, $as_ClassName, $as_ClassRoot ) )					{						$this->classList[$as_ClassName][0] =& new $as_ClassName();						$i_rtn = $this->classList[$as_ClassName][0];					}					else					{						$i_rtn = null;					}					return $i_rtn;				}			}		#endregion		#region Release Statement			/**			* 클래스별 자원반환 처리			*			* @param string		$as_Class			:	Class Instance			*/			function ReleaseClass( $as_Class )			{				$is_ClassName = get_class($as_Class);				switch( $is_ClassName )				{					case "DBA":	//DB 컨넥션 제거						$as_Class->__destruct();						break;					case "MySQL":	//DB 컨넥션 제거						$as_Class->db_disconnect();						break;					default:						break;				}			}			/**			* 자원반환			*			*/			function ReleaseResource()			{				foreach( $this->classList as $i_arr )				{					foreach( $i_arr as $i_idx => $i_class )					{						$this->ReleaseClass( &$i_class );					}				}			}		#endregion	}}?>