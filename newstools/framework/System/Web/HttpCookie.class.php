<?php#region License Statement	// Copyright (c) Sitemaps.co.kr All rights reserved.	//	// Filename	: HttpCookie.class.php	// Path		: [framework]/System/	// Code		: UTF-8	// Desc		: HttpCookie	// Author	: Sergei Kim (김성호, master@newstools.kr)	// Update	: 20091103#endregionif(!defined('__FRAMEWORK_PATH__')){header("HTTP/1.1 404 Not Found");	header("Content-Type: text/html; charset=utf-8");	exit();}if( !class_exists("HttpCookie") ){	Packager::LoadClassDefine( "", "SystemClass", Packager::GetSystemPath() );	final class HttpCookie extends SystemClass	{		#region Fields Statement			//private static $appSettings = Array();    // Fields    private bool _added;    private bool _changed;    private string _domain;    private bool _expirationSet;    private DateTime _expires;    private bool _httpOnly;    private HttpValueCollection _multiValue;    private string _name;    private string _path;    private bool _secure;    private string _stringValue;    // Methods    internal HttpCookie();    public HttpCookie(string name);    public HttpCookie(string name, string value);    internal HttpResponseHeader GetSetCookieHeader(HttpContext context);    private void SetDefaultsFromConfig();    private bool SupportsHttpOnly(HttpContext context);    // Properties    internal bool Added { get; set; }    internal bool Changed { get; set; }    public string Domain { get; set; }    public DateTime Expires { get; set; }    public bool HasKeys { get; }    public bool HttpOnly { get; set; }    public string this[string key] { get; set; }    public string Name { get; set; }    public string Path { get; set; }    public bool Secure { get; set; }    public string Value { get; set; }    public NameValueCollection Values { get; }		#endregion		#region Creator Statement			function __construct()			{			}    public HttpCookie(string name);    public HttpCookie(string name, string value);			function __destruct()			{			}		#endregion		#region Base Statement			public static function GetType()			{				return "HttpCookie";			}		#endregion		#region Header			public function AddHeader($name, $value)			{				$this->AppendHeader($name, $value);			}			public function AppendHeader($name, $value)			{				header($name.': '.$value);			}			//public void AppendCookie(HttpCookie cookie);/*			public function SetAppSetting( $as_Key, $as_Value )			{				$this->appSettings[$as_Key] = $as_Value;			}			public function GetAppSetting( $as_Key )			{				return $this->appSettings[$as_Key];			}*/		#endregion		#region Cookie			/*public function			public void AppendCookie(HttpCookie cookie);*/		#region Cookie 처리			/**			* Cookie 설정			*			* @param string		$as_Key			:	쿠키의 이름			* @param string		$as_Data		:	쿠키의 값			* @param integer	$ai_Expire		:	쿠키 만료 시간			* @param string		$as_Path		:	쿠키를 사용할 수 있는 서버 경로			* @param string		$as_Domain		:	쿠키를 사용할 수 있는 도메인			* @param integer	$as_Secure		:	쿠키가 보안 HTTPS 접속에만 허용할 지를 지정(1:보안접속시에만 사용됨)			* @return boolean			*/			function SetCookie( $as_Key, $as_Data, $ai_Expire=0, $as_Path='/', $as_Domain=GDC_SITE_ROOT, $as_Secure=0 )			{				$as_Domain = str_replace("/", "", $as_Domain);				$as_Domain = str_replace("http:", "", $as_Domain);				return setcookie( $as_Key, $as_Data, $ai_Expire, $as_Path, $as_Domain, $as_Secure );			}			/**			* Cookie 반환			*			* @param string		$as_Key			:	Key String			* @param string		$as_defaultData	:	default String			* @param boolean	$ab_skipEmpty	:	Empty인 경우 기본값 반환 여부			* @return mixed			*/			function GetCookie( $as_Key, $as_defaultData, $ab_skipEmpty=false )			{				if( is_numeric($as_defaultData) )				{					$is_rtn = is_null($this->COOKIE[$as_Key]) ? $as_defaultData : $this->COOKIE[$as_Key];					$is_rtn = is_numeric($is_rtn) ? $is_rtn : $as_defaultData;					$is_rtn = $ab_skipEmpty ? (empty($is_rtn) ? $as_defaultData : $is_rtn) : $is_rtn;				}				else				{					$is_rtn = is_null($this->COOKIE[$as_Key]) ? $as_defaultData : $this->COOKIE[$as_Key];					$is_rtn = $ab_skipEmpty ? (empty($is_rtn) ? $as_defaultData : $is_rtn) : $is_rtn;				}				return $is_rtn;			}		#endregion	}}?>