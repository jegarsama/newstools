<?php#region License Statement	// Copyright (c) Sitemaps.co.kr All rights reserved.	//	// Filename	: Page.class.php	// Path		: [framework]/System/Web/Page/	// Code		: UTF-8	// Desc		: Page	// Author	: Sergei Kim (김성호, master@newstools.kr)	// Update	: 20091026#endregionif(!defined('__FRAMEWORK_PATH__')){header("HTTP/1.1 404 Not Found");	header("Content-Type: text/html; charset=utf-8");	exit();}if( !class_exists("Page") ){	Packager::LoadClassDefine( "", "SystemClass", Packager::GetSystemPath() );//	$gcls_ClassCollection->LoadClassDefine( "/data", "UTLString", GDC_SYSTEM_ROOT );//	$gcls_ClassCollection->LoadClassDefine( "/data", "UTLDateTime", GDC_SYSTEM_ROOT );//	require_once "html/package.php";	//Html 출력 클래스 모음exit;	class Page extends SystemClass	{		var $SERVER		= null;		var $COOKIE		= null;		var $SESSION	= null;		var $REQUEST	= null;		var $PageType	= "HTML";		var $cls_Html	= null;		var $Attribute	= "";		var $Content	= "";		//클래스 생성자		function Page( $as_PageType="HTML" )		{			$this->InitField( $as_PageType );		}		/**		* 데이터 초기화		*		*/		function InitField( $as_PageType="HTML" )		{			global $_SERVER, $_COOKIE, $_SESSION, $_POST, $_GET, $_REQUEST;			$this->SERVER	= $_SERVER;			$this->COOKIE	= $_COOKIE;			$this->SESSION	= $_SESSION;			switch( $this->SERVER[REQUEST_METHOD] )			{				case "GET":		$this->REQUEST = $_GET;		break;				case "POST":	$this->REQUEST = $_POST;	break;				default:		$this->REQUEST = $_REQUEST;	break;			}			$this->REQUEST = $this->ObjectToArray( $this->ConvertEncoding( $this->ArrayToObject( $this->REQUEST ) ) );			$this->SetPageType( $as_PageType );			$this->cls_Html	= new Html();		}		#region Convert 처리			/**			* 배열을 Object로 변환			*			* @param array		$arr_Source			:	원본소스			* @return object			*/			function ArrayToObject( $arr_Source )			{				if(is_object($arr_Source))					return $arr_Source;				if(!is_array($arr_Source))					return null;				$rtn = null;				foreach($arr_Source as $key=>$val) {					$rtn->{$key} = $val;				}				return $rtn;			}			/**			* Object을 배열로 변환			*			* @param object		$aobj_Source			:	원본소스			* @return array			*/			function ObjectToArray( $aobj_Source )			{				if(is_array($aobj_Source))					return $aobj_Source;				if(!is_object($aobj_Source))					return array();				return get_object_vars($aobj_Source);			}			/**			* Encode			*			* @param object		$source			:	원본소스			* @param string		$encode			:	언어코드			* @return object			*/			function ConvertEncoding( $source, $encode='EUC-KR' )			{				return UTLString::convertEncoding( $source, $encode );			}		#endregion		#region Cookie 처리			/**			* Cookie 설정			*			* @param string		$as_Key			:	쿠키의 이름			* @param string		$as_Data		:	쿠키의 값			* @param integer	$ai_Expire		:	쿠키 만료 시간			* @param string		$as_Path		:	쿠키를 사용할 수 있는 서버 경로			* @param string		$as_Domain		:	쿠키를 사용할 수 있는 도메인			* @param integer	$as_Secure		:	쿠키가 보안 HTTPS 접속에만 허용할 지를 지정(1:보안접속시에만 사용됨)			* @return boolean			*/			function SetCookie( $as_Key, $as_Data, $ai_Expire=0, $as_Path='/', $as_Domain=GDC_SITE_ROOT, $as_Secure=0 )			{				$as_Domain = str_replace("/", "", $as_Domain);				$as_Domain = str_replace("http:", "", $as_Domain);				return setcookie( $as_Key, $as_Data, $ai_Expire, $as_Path, $as_Domain, $as_Secure );			}			/**			* Cookie 반환			*			* @param string		$as_Key			:	Key String			* @param string		$as_defaultData	:	default String			* @param boolean	$ab_skipEmpty	:	Empty인 경우 기본값 반환 여부			* @return mixed			*/			function GetCookie( $as_Key, $as_defaultData, $ab_skipEmpty=false )			{				if( is_numeric($as_defaultData) )				{					$is_rtn = is_null($this->COOKIE[$as_Key]) ? $as_defaultData : $this->COOKIE[$as_Key];					$is_rtn = is_numeric($is_rtn) ? $is_rtn : $as_defaultData;					$is_rtn = $ab_skipEmpty ? (empty($is_rtn) ? $as_defaultData : $is_rtn) : $is_rtn;				}				else				{					$is_rtn = is_null($this->COOKIE[$as_Key]) ? $as_defaultData : $this->COOKIE[$as_Key];					$is_rtn = $ab_skipEmpty ? (empty($is_rtn) ? $as_defaultData : $is_rtn) : $is_rtn;				}				return $is_rtn;			}		#endregion		#region Request 반환처리			/**			* Request 반환			*			* @param string		$as_Key			:	Key String			* @param string		$as_defaultData	:	default String			* @param boolean	$ab_skipEmpty	:	Empty인 경우 기본값 반환 여부			* @return mixed			*/			function GetRequest( $as_Key, $as_defaultData, $ab_skipEmpty=false )			{				if( is_numeric($as_defaultData) )				{					$is_rtn = is_null($this->REQUEST[$as_Key]) ? $as_defaultData : $this->REQUEST[$as_Key];					$is_rtn = is_numeric($is_rtn) ? $is_rtn : $as_defaultData;					$is_rtn = $ab_skipEmpty ? (empty($is_rtn) ? $as_defaultData : $is_rtn) : $is_rtn;				}				else				{					$is_rtn = is_null($this->REQUEST[$as_Key]) ? $as_defaultData : $this->REQUEST[$as_Key];					$is_rtn = $ab_skipEmpty ? (empty($is_rtn) ? $as_defaultData : $is_rtn) : $is_rtn;				}				return $is_rtn;			}		#endregion		/**		* 개행문자 추가		*		* @param string		$as_Line			:	Single Line String		* @return string		*/		function SetCrLf( $as_Line="" )		{			return $this->cls_Html->SetCrLf( $as_Line );		}		/**		* 페이지 유형설정		*		*/		function SetPageType( $as_PageType="HTML" )		{			$this->PageType	= $as_PageType;		}		/**		* PageInfo 셋팅		*		* @param string		$as_Field		:	Field Name		* @param string		$as_Val			:	Value String		*/		function SetPageInfoOfField( $as_Field, $as_Val="" )		{			switch( $this->PageType )			{				case "HTML":					$this->cls_Html->SetPageInfoOfField( $as_Field, $as_Val );					break;				default:					break;			}		}		/**		* JavaScript 추가		*		* @param string		$as_Url		:	File Url		*/		function AddJavaScript( $as_Url )		{			$this->cls_Html->AddJavaScript( $as_Url);		}		/**		* JavaScript 제외		*		* @param string		$as_Url		:	File Url		*/		function RemoveJavaScript( $as_Url )		{			$this->cls_Html->RemoveJavaScript( $as_Url);		}		/**		* StyleSheet 추가		*		* @param string		$as_Url		:	File Url		*/		function AddStyleSheet( $as_Url )		{			$this->cls_Html->AddStyleSheet( $as_Url);		}		/**		* StyleSheet 제외		*		* @param string		$as_Url		:	File Url		*/		function RemoveStyleSheet( $as_Url )		{			$this->cls_Html->RemoveStyleSheet( $as_Url);		}		/**		* 문서 속성 설정		*		* @param string		$as_Attribute	:	Body Attribute		*/		function SetAttribute( $as_Attribute )		{			$this->Attribute = $as_Attribute;		}		/**		* 내용 설정		*		* @param string		$as_Content		:	Content		*/		function SetContent( $as_Content )		{			$this->Content = $as_Content;		}		/**		* 내용 추가(앞쪽에 추가)		*		* @param string		$as_Content		:	Content		*/		function InsertContent( $as_Content )		{			$this->Content = $as_Content . $this->Content;		}		/**		* 내용 추가(후위에 추가)		*		* @param string		$as_Content		:	Content		*/		function AddContent( $as_Content )		{			$this->Content.= $as_Content;		}		/**		* 내용 출력		*		* @return string		*/		function GetContent()		{			return $this->Content;		}		/**		* 출력용 본문설정		*		*/		function PrePrintPage()		{		}		/**		* Page 출력		*		* @param string		$as_Title			:	Page Title		* @param string		$as_Keyword			:	Page Key-Word		*/		function PrintPage( $as_Title="", $as_KeyWord="" )		{			switch( $this->PageType )			{				case "HTML":					$this->cls_Html->SetAttribute( $this->Attribute );					$this->cls_Html->SetContent( $this->Content );					$this->cls_Html->PrintPage( $as_Title, $as_KeyWord );					break;				default:					break;			}		}	}}?>