<?php#region License Statement	// Copyright (c) Sitemaps.co.kr All rights reserved.	//	// Filename	: BasePage.class.php	// Path		: [framework]/System/Web/Page/	// Code		: UTF-8	// Desc		: BasePage	// Author	: Sergei Kim (김성호, master@newstools.kr)	// Update	: 20091026#endregionif(!defined('__FRAMEWORK_PATH__')){header("HTTP/1.1 404 Not Found");	header("Content-Type: text/html; charset=utf-8");	exit();}if( !class_exists("BasePage") ){	Packager::LoadClassDefine( "", "SystemClass", Packager::GetSystemPath() );	global $gcls_GlobalConfiguration;	global $_SERVER, $_COOKIE, $_SESSION, $_POST, $_GET, $_REQUEST;//http://kr.php.net/manual/kr/language.oop5.abstract.php	abstract class BasePage extends SystemClass	{		#region Fields Statement			public $SiteURL		= $gcls_GlobalConfiguration->GetAppSetting('SiteURL');			public $SecureURL	= $gcls_GlobalConfiguration->GetAppSetting('SecureURL');			public $ManagerURL	= $gcls_GlobalConfiguration->GetAppSetting('ManagerURL');			public $ImageURL	= $gcls_GlobalConfiguration->GetAppSetting('ImageURL');			public $WWWURL		= $gcls_GlobalConfiguration->GetAppSetting('WWWURL');/*			protected $httpRequest;			protected $httpResponse;			$this->SERVER	= $_SERVER;			$this->COOKIE	= $_COOKIE;			$this->SESSION	= $_SESSION;			switch( $this->SERVER[REQUEST_METHOD] )			{				case "GET":		$this->REQUEST = $_GET;		break;				case "POST":	$this->REQUEST = $_POST;	break;				default:		$this->REQUEST = $_REQUEST;	break;			}			$this->REQUEST = $this->ObjectToArray( $this->ConvertEncoding( $this->ArrayToObject( $this->REQUEST ) ) );			$this->SetPageType( $as_PageType );			$this->cls_Html	= new Html();*//*			private string markupType;			public virtual string MarkupType{ get{ return this.markupType; } set{ this.markupType = value; } }			protected MarkupFactory markupFactory;			protected Markup markup;			protected string scriptFileName = String.Empty;*/			public $UserType	= "";			public $UserID		= "";			public $UserName	= "";		#endregion		#region Creator Statement			function __construct()			{			}			function __destruct()			{			}		#endregion		#region Base Statement			public static function GetType()			{				return "BasePage";			}		#endregion		#region Settings Statement			/*public function SetAppSetting( $as_Key, $as_Value )			{				$this->appSettings[$as_Key] = $as_Value;			}			public function GetAppSetting( $as_Key )			{				return $this->appSettings[$as_Key];			}*/		#endregion	}}/*class Message{    private $message;    public function __construct($message){        if(!is_string($message)){            throw new Exception('Invalid parameter type!');        }        $this->message=$message;    }    public function fetchMessage(){        return $this->message;    }}try{    // instantiate '$message' object    $message=new Message('This is a regular PHP 5 class.');    echo $message->fetchMessage();}catch(Exception $e){    echo $e->getMessage();    exit();}As you can see, this isn’t rocket science. What I’ve done above is simply define a regular PHP 5 class, which only displays string messages, passed on as a parameter to its constructor. So far, it’s nothing unexpected, so I’ll go one step further and turn this class into an abstract one. Take a look:abstract class Message{    private $message;    public function __construct($message){        if(!is_string($message)){            throw new Exception('Invalid parameter type!');        }        $this->message=$message;    }    public function fetchMessage(){        return $this->message;    }}try{    // try to instantiate '$message' object - throws a fatalerror    $message=new Message('This is an abstract PHP 5 class.');    echo $message->fetchMessage();}catch(Exception $e){    echo $e->getMessage();    exit();}*/?>