<?php#region License Statement	// Copyright (c) Sitemaps.co.kr All rights reserved.	//	// Filename	: HttpResponse.class.php	// Path		: [framework]/System/	// Code		: UTF-8	// Desc		: HttpResponse	// Author	: Sergei Kim (김성호, master@newstools.kr)	// Update	: 20091103#endregionif(!defined('__FRAMEWORK_PATH__')){header("HTTP/1.1 404 Not Found");	header("Content-Type: text/html; charset=utf-8");	exit();}if( !class_exists("HttpResponse") ){	Packager::LoadClassDefine( "", "SystemClass", Packager::GetSystemPath() );	final class HttpResponse extends SystemClass	{		#region Fields Statement			//private static $appSettings = Array();    // Fields    private AggregateCacheDependency _aggDependency;    private string _appPathModifier;    private bool _bufferOutput;    private string _cacheControl;    private bool _cacheControlHeaderAdded;    private ArrayList _cacheHeaders;    private ResponseDependencyList _cacheItemDependencyList;    private HttpCachePolicy _cachePolicy;    private string _charSet;    private bool _chunked;    private bool _clientDisconnected;    private bool _closeConnectionAfterError;    private bool _completed;    private bool _contentLengthSet;    private string _contentType;    private bool _contentTypeSet;    private HttpContext _context;    private HttpCookieCollection _cookies;    private bool _customCharSet;    private ArrayList _customHeaders;    private Encoder _encoder;    private Encoding _encoding;    private bool _ended;    private DateTime _expiresAbsolute;    private bool _expiresAbsoluteSet;    private int _expiresInMinutes;    private bool _expiresInMinutesSet;    private ResponseDependencyList _fileDependencyList;    private bool _filteringCompleted;    private bool _flushing;    private bool _handlerHeadersGenerated;    private Encoding _headerEncoding;    private HttpHeaderCollection _headers;    private bool _headersWritten;    private HttpWriter _httpWriter;    private bool _isRequestBeingRedirected;    private ErrorFormatter _overrideErrorFormatter;    private string _redirectLocation;    private bool _redirectLocationSet;    private static readonly string _redirectQueryString;    private static readonly string _redirectQueryStringInline;    private int _statusCode;    private string _statusDescription;    private bool _statusSet;    private int _subStatusCode;    private bool _suppressContent;    private bool _suppressContentSet;    private bool _suppressHeaders;    private bool _transferEncodingSet;    private bool _useAdaptiveError;    private bool _versionHeaderSent;    private ResponseDependencyList _virtualPathDependencyList;    private HttpWorkerRequest _wr;    private TextWriter _writer;    internal static readonly string RedirectQueryStringAssignment;    internal static readonly string RedirectQueryStringValue;    internal static readonly string RedirectQueryStringVariable;    private static byte[] s_chunkEnd;    private static byte[] s_chunkSuffix;    // Methods    [AspNetHostingPermission(SecurityAction.Demand, Level=AspNetHostingPermissionLevel.Medium)]    public void AppendToLog(string param);    public string ApplyAppPathModifier(string virtualPath);    internal string ApplyRedirectQueryStringIfRequired(string url);    internal void BeforeCookieCollectionChange();    internal IAsyncResult BeginExecuteUrlForEntireResponse(string pathOverride, NameValueCollection requestHeaders, AsyncCallback cb, object state);    public void BinaryWrite(byte[] buffer);    public void Clear();    internal void ClearAll();    public void ClearContent();    public void ClearHeaders();    private void ClearNativeResponse(bool clearEntity, bool clearHeaders, IIS7WorkerRequest wr);    public void Close();    internal void CloseConnectionAfterError();    private string ConvertToFullyQualifiedRedirectUrlIfRequired(string url);    internal CacheDependency CreateCacheDependencyForResponse(CacheDependency dependencyVary);    public void DisableKernelCache();    internal void Dispose();    public void End();    internal void EndExecuteUrlForEntireResponse(IAsyncResult result);    internal void FilterOutput();    internal void FinalFlushAtTheEndOfRequestProcessing();    internal void FinalFlushAtTheEndOfRequestProcessing(bool needPipelineCompletion);    public void Flush();    private void Flush(bool finalFlush);    internal ArrayList GenerateResponseHeaders(bool forCache);    internal void GenerateResponseHeadersForCookies();    internal void GenerateResponseHeadersForHandler();    internal ArrayList GenerateResponseHeadersIntegrated(bool forCache);    internal int GetBufferedLength();    internal CacheDependency GetCacheDependency();    internal string[] GetCacheItemDependencies();    internal ErrorFormatter GetErrorFormatter(Exception e);    internal string[] GetFileDependencies();    internal string GetHttpHeaderContentEncoding();    private string GetNormalizedFilename(string fn);    internal HttpRawResponse GetSnapshot();    internal CacheDependency GetVirtualPathDependency();    internal bool HasCacheItemDependencies();    internal bool HasFileDependencies();    internal void IgnoreFurtherWrites();    internal void InitResponseWriter();    internal bool IsBuffered();    private bool IsKernelCacheEnabledForVaryByStar();    internal void OnCookieAdd(HttpCookie cookie);    internal void OnCookieCollectionChange();    public void Pics(string value);    public void Redirect(string url);    public void Redirect(string url, bool endResponse);    internal bool RedirectToErrorPage(string url);    internal string RemoveAppPathModifier(string virtualPath);    public static void RemoveOutputCacheItem(string path);    internal void ReportRuntimeError(Exception e, bool canThrow, bool localExecute);    internal void SetAppPathModifier(string appPathModifier);    public void SetCookie(HttpCookie cookie);    internal void SetOverrideErrorFormatter(ErrorFormatter errorFormatter);    internal string SetupKernelCaching(string originalCacheUrl);    internal TextWriter SwitchWriter(TextWriter writer);    internal void SynchronizeHeader(int knownHeaderIndex, string name, string value);    internal void SynchronizeStatus(int statusCode, int subStatusCode, string description);    internal void SyncStatusIntegrated();    public void TransmitFile(string filename);    public void TransmitFile(string filename, long offset, long length);    internal void UpdateNativeResponse(bool sendHeaders);    private string UrlEncodeRedirect(string url);    internal void UseSnapshot(HttpRawResponse rawResponse, bool sendBody);    private void ValidateFileRange(string filename, long offset, long length);    public void Write(char ch);    public void Write(object obj);    public void Write(string s);    public void Write(char[] buffer, int index, int count);    private void WriteErrorMessage(Exception e, bool dontShowSensitiveErrors);    private void WriteExceptionStack(Exception e);    public void WriteFile(string filename);    public void WriteFile(string filename, bool readIntoMemory);    [SecurityPermission(SecurityAction.Demand, UnmanagedCode=true)]    public void WriteFile(IntPtr fileHandle, long offset, long size);    public void WriteFile(string filename, long offset, long size);    private void WriteHeaders();    private void WriteOneExceptionStack(Exception e);    private void WriteStreamAsText(Stream f, long offset, long size);    public void WriteSubstitution(HttpResponseSubstitutionCallback callback);    internal void WriteVirtualFile(VirtualFile vf);    // Properties    public bool Buffer { get; set; }    public bool BufferOutput { get; set; }    public HttpCachePolicy Cache { get; }    public string CacheControl { get; set; }    internal bool CanExecuteUrlForEntireResponse { get; }    public string Charset { get; set; }    internal Encoder ContentEncoder { get; }    public Encoding ContentEncoding { get; set; }    public string ContentType { get; set; }    internal HttpContext Context { get; set; }    public HttpCookieCollection Cookies { get; }    public int Expires { get; set; }    public DateTime ExpiresAbsolute { get; set; }    public Stream Filter { get; set; }    internal bool HasCachePolicy { get; }    public Encoding HeaderEncoding { get; set; }    public NameValueCollection Headers { get; }    internal bool HeadersWritten { get; set; }    public bool IsClientConnected { get; }    public bool IsRequestBeingRedirected { get; }    public TextWriter Output { get; }    public Stream OutputStream { get; }    public string RedirectLocation { get; set; }    internal HttpRequest Request { get; }    public string Status { get; set; }    public int StatusCode { get; set; }    public string StatusDescription { get; set; }    public int SubStatusCode { get; set; }    public bool SuppressContent { get; set; }    public bool TrySkipIisCustomErrors { get; set; }    internal bool UseAdaptiveError { get; set; }    private bool UsingHttpWriter { get; }		#endregion		#region Creator Statement			function __construct()			{			}			function __destruct()			{			}		#endregion		#region Base Statement			public static function GetType()			{				return "HttpResponse";			}		#endregion		#region Header			public function AddHeader($name, $value)			{				$this->AppendHeader($name, $value);			}			public function AppendHeader($name, $value)			{				header($name.': '.$value);			}			//public void AppendCookie(HttpCookie cookie);/*			public function SetAppSetting( $as_Key, $as_Value )			{				$this->appSettings[$as_Key] = $as_Value;			}			public function GetAppSetting( $as_Key )			{				return $this->appSettings[$as_Key];			}*/		#endregion		#region Cookie			/*public function			public void AppendCookie(HttpCookie cookie);*/		#region Cookie 처리			/**			* Cookie 설정			*			* @param string		$as_Key			:	쿠키의 이름			* @param string		$as_Data		:	쿠키의 값			* @param integer	$ai_Expire		:	쿠키 만료 시간			* @param string		$as_Path		:	쿠키를 사용할 수 있는 서버 경로			* @param string		$as_Domain		:	쿠키를 사용할 수 있는 도메인			* @param integer	$as_Secure		:	쿠키가 보안 HTTPS 접속에만 허용할 지를 지정(1:보안접속시에만 사용됨)			* @return boolean			*/			function SetCookie( $as_Key, $as_Data, $ai_Expire=0, $as_Path='/', $as_Domain=GDC_SITE_ROOT, $as_Secure=0 )			{				$as_Domain = str_replace("/", "", $as_Domain);				$as_Domain = str_replace("http:", "", $as_Domain);				return setcookie( $as_Key, $as_Data, $ai_Expire, $as_Path, $as_Domain, $as_Secure );			}			/**			* Cookie 반환			*			* @param string		$as_Key			:	Key String			* @param string		$as_defaultData	:	default String			* @param boolean	$ab_skipEmpty	:	Empty인 경우 기본값 반환 여부			* @return mixed			*/			function GetCookie( $as_Key, $as_defaultData, $ab_skipEmpty=false )			{				if( is_numeric($as_defaultData) )				{					$is_rtn = is_null($this->COOKIE[$as_Key]) ? $as_defaultData : $this->COOKIE[$as_Key];					$is_rtn = is_numeric($is_rtn) ? $is_rtn : $as_defaultData;					$is_rtn = $ab_skipEmpty ? (empty($is_rtn) ? $as_defaultData : $is_rtn) : $is_rtn;				}				else				{					$is_rtn = is_null($this->COOKIE[$as_Key]) ? $as_defaultData : $this->COOKIE[$as_Key];					$is_rtn = $ab_skipEmpty ? (empty($is_rtn) ? $as_defaultData : $is_rtn) : $is_rtn;				}				return $is_rtn;			}		#endregion	}}?>