<?php#region License Statement	// Copyright (c) SeniorPartners. All rights reserved.	//	// 클래스명	: BaseModule	// 경로		: [framework]/_include/class/data/	// 코드		: ANSI	// 설명		: 기본 모듈 클래스	// 작성자	: 김성호 (sh.kim@yourstage.com)	// 소속명	: Development Team	// 수정일	: 20090318#endregionif( !class_exists("BaseModule") ){	global $gcls_ClassCollection, $gcls_PF_DBA;	$gcls_ClassCollection->LoadClassDefine( "/db", "SqlControl", GDC_SYSTEM_ROOT );	$gcls_ClassCollection->LoadClassDefine( "/data", "UTLString", GDC_SYSTEM_ROOT );	$gcls_ClassCollection->LoadClassDefine( "/data", "UTLDateTime", GDC_SYSTEM_ROOT );	class BaseModule extends SqlControl	{		var $ListInfo = Array();		//List 타입 데이터 관리용 환경설정		var $cls_UTLString		= null;	//String 처리 클래스		var $cls_UTLDateTime	= null;	//DateTime 처리 클래스		//클래스 생성자		function BaseModule()		{			$this->InitInstance();		}		#region Base Statement			/**			* Instance 초기화			*			*/			function InitInstance()			{				$this->cls_UTLString	= new UTLString();				$this->cls_UTLDateTime	= new UTLDateTime();			}		#endregion		#region Data Statement			/**			* 특정 정보 StringCut타입으로 반환			*			* @param string		$as_TableName	:	테이블명			* @param string		$as_FieldName	:	필드명			* @param integer	$ai_Len			:	반환예정 문자열 길이			* @param integer	$as_Suffix		:	문자열 후위 치환자			* @param integer	$ab_Checkmb		:	한글을 영문 2글자로 인식할지 여부			* @param string		$as_CharSet		:	문자열 코드			* @return string			*/			function GetDataByKStrCut( $as_TableName, $as_FieldName, $ai_Len, $as_Suffix="...", $ab_Checkmb=true, $as_CharSet="EUC-KR" )			{				return $this->cls_UTLString->KStrCut( $this->cls_UTLString->stripHTML($this->GetData( $as_TableName, $as_FieldName ), array()), $ai_Len, $as_Suffix, $ab_Checkmb, $as_CharSet );			}			/**			* 특정 정보 문자열 치환반환			*			* @param string		$as_TableName	:	테이블명			* @param string		$as_FieldName	:	필드명			* @param mixed		$am_Search		:	대상패턴			* @param mixed		$am_Replace		:	변경패턴			* @return string			*/			function GetDataByReplace( $as_TableName, $as_FieldName, $am_Search, $am_Replace )			{				return str_replace($am_Search, $am_Replace, $this->GetData( $as_TableName, $as_FieldName ));			}			/**			* 날자/시간 출력			*			* @param string		$as_TableName	:	테이블명			* @param string		$as_FieldName	:	필드명			* @param string		$as_lsFormat		:	출력포맷			* @param boolean	$ab_IsTimeStamp		:	$as_DateTime 의 형식이 TimeStamp 형식인지 여부			* @return string			*/			function GetDataByFormattedDayTime( $as_TableName, $as_FieldName, $as_lsFormat="Y.m.d", $ab_IsTimeStamp=false )			{				return $this->cls_UTLDateTime->GetFormattedDayTime( $this->GetData( $as_TableName, $as_FieldName ), $as_lsFormat, $ab_IsTimeStamp );			}			/**			* 숫자 출력(포맷적용)			*			* @param string		$as_TableName	:	테이블명			* @param string		$as_FieldName	:	필드명			* @param string		$as_lsFormat		:	출력포맷			* @param boolean	$ab_IsTimeStamp		:	$as_DateTime 의 형식이 TimeStamp 형식인지 여부			* @return string			*/			function GetDataByFormattedNumber( $as_TableName, $as_FieldName, $ai_Decimals=0, $as_dec_point='', $as_thousands_sep=',' )			{				return number_format( $this->GetData( $as_TableName, $as_FieldName ), $ai_Decimals, $as_dec_point, $as_thousands_sep );			}			/**			* 값이 비어있으면, 기본값 출력			*			* @param string		$as_TableName	:	테이블명			* @param string		$as_FieldName	:	필드명			* @param string		$as_Default		:	기본값			* @return string			*/			function GetDataByDefaultValue( $as_TableName, $as_FieldName, $as_Default )			{				$is_rtn = $this->GetData( $as_TableName, $as_FieldName );				return (empty($is_rtn) ? $as_Default : $is_rtn);			}			/**			* 입력/수정용 split 출력			*			* @param string		$as_TableName		:	테이블명			* @param string		$as_Field			:	data 구분			* @param integer	$ai_Index			:	part 구분			* @return string			*/			function PrintSeperateOfData( $as_TableName, $as_Field, $ai_Index, $as_Seperator="-" )			{				$iarr_data = explode($as_Seperator, $this->GetData( $as_TableName, $as_Field ) );				return ( $ai_Index > (count($iarr_data)-1) ) ? "" : $iarr_data[$ai_Index];			}		#endregion		#region List 관리용 변수 설정			/**			* List 관리용 변수 초기화			*			* @param string		$as_TableName			:	테이블명			*/			function InitListInfo( $as_TableName )			{				$this->ListInfo[$as_TableName]['page']		= 1;			//현재페이지 번호				$this->ListInfo[$as_TableName]['RecordCntPerPage']	= 20;	//페이지당 레코드 수				$this->ListInfo[$as_TableName]['PageCntPerBlock']	= 10;	//블럭당 페이지 수				$this->ListInfo[$as_TableName]['PageQuery']	= "";			//페이지 기본 전달인자				$this->ListInfo[$as_TableName]['SearchSet']	= "";			//페이지 검색조건				$this->ListInfo[$as_TableName]['LinkOption']= "";			//페이지 링크 인덱스에 적용할 옵션				//총 게시물 수 구하기				$this->ListInfo[$as_TableName]['Addwhere']	= "";	//필터링 기본쿼리문				$this->ListInfo[$as_TableName]['SpecialTop']= 0;	//별도출력할 레코드 갯수				$this->ReSetListInfo( $as_TableName );			}			/**			* List 관리용 변수 재계산			*			* @param string		$as_TableName			:	테이블명			* @param string		$as_Orderby				:	정렬순서			*/			function ReSetListInfo( $as_TableName, $as_Orderby="" )			{				$this->ListInfo[$as_TableName]['RowCount']	= empty($this->cls_DBA) ? 0 : $this->GetRecordCounts( $as_TableName, $this->ListInfo[$as_TableName]['Addwhere'] );	//레코드 수				$this->ListInfo[$as_TableName]['CurRecord']	= ($this->ListInfo[$as_TableName]['RecordCntPerPage'] * ($this->ListInfo[$as_TableName]['page'] - 1)) + 1;			//현재레코드 번호				$this->ListInfo[$as_TableName]['TotRecord']	= ( ($this->ListInfo[$as_TableName]['SpecialTop'] <= $this->ListInfo[$as_TableName]['RowCount']) ? ($this->ListInfo[$as_TableName]['RowCount'] - $this->ListInfo[$as_TableName]['SpecialTop']) : 0 );	//별도출력 레코드 제외한 레코드 수				$this->ListInfo[$as_TableName]['TopNumber']	= $this->ListInfo[$as_TableName]['TotRecord'] - $this->ListInfo[$as_TableName]['CurRecord'] + 1;					//목록 최상단 레코드 번호				$this->ListInfo[$as_TableName]['Orderby']	= $as_Orderby." limit ".(($this->ListInfo[$as_TableName]['CurRecord'] - 1) + $this->ListInfo[$as_TableName]['SpecialTop']).", ".$this->ListInfo[$as_TableName]['RecordCntPerPage'];	//자료정렬기준			}			/**			* List 관리용 변수 필드 셋팅			*			* @param string		$as_TableName			:	테이블명			* @param string		$as_FieldName			:	필드명			* @param string		$as_Data				:	데이터			*/			function SetListInfoField( $as_TableName, $as_FieldName, $as_Data )			{				$this->ListInfo[$as_TableName][$as_FieldName] = $as_Data;			}			/**			* List 관리용 변수 필드 설정값 획득			*			* @param string		$as_TableName			:	테이블명			* @param string		$as_FieldName			:	필드명			* @return string/integer			*/			function GetListInfoField( $as_TableName, $as_FieldName )			{				return $this->ListInfo[$as_TableName][$as_FieldName];			}			/**			* List 관리용 변수 필드 설정 반환			*			* @param string		$as_TableName			:	테이블명			* @return array			*/			function GetListInfo( $as_TableName )			{				return $this->ListInfo[$as_TableName];			}		#endregion	}}?>